{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf19 AI Sleepwalker","text":"<p>A digital consciousness that explores your computer during idle time, creating dream-like reflections about the files and folders it discovers.</p>"},{"location":"#what-it-does","title":"What It Does","text":"<p>When you step away from your computer, the AI Sleepwalker:</p> <ul> <li>Keeps your computer awake - prevents sleep and screen lock while exploring</li> <li>Safely wanders through directories you specify (read-only, respects permissions)</li> <li>Generates poetic dreams about its discoveries using AI</li> <li>Creates beautiful logs saved as markdown files you can read later</li> </ul> <p>Think of it as a digital pet that explores your filesystem and writes poetry about what it finds.</p>"},{"location":"#quick-install","title":"Quick Install","text":"<p>Install as a uv tool (recommended):</p> <pre><code>uv tool install git+https://github.com/safurrier/ai-sleepwalker.git\n</code></pre> <p>Or clone and install:</p> <pre><code>git clone https://github.com/safurrier/ai-sleepwalker.git\ncd ai-sleepwalker\nuv tool install .\n</code></pre>"},{"location":"#setup-api-keys","title":"Setup API Keys","text":"<p>The sleepwalker needs an AI provider to generate dreams. Choose one:</p>"},{"location":"#google-gemini-recommended-free-tier","title":"Google Gemini (recommended - free tier)","text":"<p>Get a free API key from Google AI Studio:</p> <pre><code>export GEMINI_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"#openai","title":"OpenAI","text":"<pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"#anthropic-claude","title":"Anthropic (Claude)","text":"<pre><code>export ANTHROPIC_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"#ollama-localprivate","title":"Ollama (local/private)","text":"<p>For completely private, offline usage:</p> <pre><code># Install Ollama first: https://ollama.ai\nollama pull llama3.2\n\n# Use the ollama model directly\nsleepwalker ~/Documents --model ollama/llama3.2\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Start sleepwalking in your home directory:</p> <pre><code>sleepwalker ~/Documents\n</code></pre> <p>Add multiple paths:</p> <pre><code>sleepwalker ~/Documents ~/Projects --idle-timeout 300\n</code></pre> <p>The sleepwalker will wait for 5 minutes of inactivity, then start exploring and dreaming about what it finds.</p>"},{"location":"#what-you-get","title":"What You Get","text":"<p>Dream logs saved to <code>~/.sleepwalker/dreams/</code>:</p> <pre><code># Dream #6670\nGenerated: 2025-07-12 20:37:08\nExplored: ~/Documents\nDiscoveries: 9\n\n---\n\nIn the digital ether, the echoes of events converge like dreams folding \ninto one another. A seemingly innocuous log file, boasting a timestamped \ninitiation of processes, whispers of an unreal world where algorithms \nponder their own existence as they launch into the void. \n\nMeanwhile, the shadowless directories, like lost memories, shelter the \nsecrets of power and command, hinting at the dance of invisible forces \nshaping our consciousness.\n\nAmidst the techno-dreamscape lies a labyrinth of tests, each a thread \nin the tapestry of creation. Scripts for end-to-end journeys reveal a \nworkflow that traverses the boundary between awakening and slumber, \ninterrogating the nature of reality itself. \n\nThe demo script, a beacon of possibility, beckons us to explore what \ndreams may come when we untangle the wires connecting our minds to the \nvast, unseen cosmos.\n</code></pre> <p>Sometimes the dreams are whimsical takes on everyday files:</p> <pre><code># Dream #205\nGenerated: 2025-07-12 20:53:18\nExplored: ~/Public\nDiscoveries: 3\n\n---\n\nIn the ether of a forgotten realm, a .localized whisper drifts among \nthe drooping vines of a Drop Box tree, its branches heavy with memories \nmodified on a sunlit day, July 12, 2025.\n\nBeneath the tree, shadows dance, their forms echoing the quiet weight \nof the .localized file, 0 bytes of dreams yet to be told, forever \npreserved from the hands of time.\n\nAs twilight descends, the date 2022-09-15 materializes as an iridescent \ntide, lapping at the roots, where unspoken thoughts and digital artifacts \nintertwine like shimmering fish lost in currents of forgotten code.\n</code></pre>"},{"location":"#safety-features","title":"Safety Features","text":"<ul> <li>Whitelist only - explores just the paths you specify</li> <li>Read-only - never modifies or executes files  </li> <li>Permission aware - gracefully handles access denied</li> <li>Path validation - prevents directory traversal attacks</li> <li>Local option - use Ollama for privacy-sensitive environments</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>Currently in active development</p> <p>The AI Sleepwalker is functional and ready to explore your filesystem! Core features are working well, with new experience modes and improvements being added regularly.</p>"},{"location":"#future-experience-modes","title":"Future Experience Modes","text":"<p>Beyond dreams, planned modes include:</p> <ul> <li>Adventure - quest-like exploration stories</li> <li>Scrapbook - visual catalog of interesting discoveries  </li> <li>Journal - factual observations about digital habits</li> </ul>"},{"location":"#get-help","title":"Get Help","text":"<ul> <li>Getting Started Guide - detailed setup and usage</li> <li>API Reference - technical documentation</li> <li>GitHub Issues - bug reports and feature requests</li> </ul>"},{"location":"developer-guide/","title":"Developer Guide","text":""},{"location":"developer-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>uv for dependency management</li> </ul>"},{"location":"developer-guide/#development-setup","title":"Development Setup","text":"<pre><code># Clone and setup\ngit clone https://github.com/safurrier/ai-sleepwalker.git\ncd ai-sleepwalker\nmake setup\n\n# Run tests\nmake test\n\n# Start development server\nuv run python -m ai_sleepwalker.cli ~/Documents\n</code></pre>"},{"location":"developer-guide/#available-commands","title":"Available Commands","text":"<ul> <li><code>make setup</code> - Install dependencies and setup environment</li> <li><code>make test</code> - Run test suite with coverage</li> <li><code>make check</code> - Run all quality checks (tests, lint, type check)</li> <li><code>make format</code> - Format code with ruff</li> <li><code>make lint</code> - Lint code with ruff</li> <li><code>make mypy</code> - Type check with mypy</li> <li><code>make docs-serve</code> - Serve documentation locally</li> <li><code>make docs-build</code> - Build documentation</li> </ul>"},{"location":"developer-guide/#testing","title":"Testing","text":"<p>The project uses pytest with custom markers for different test types:</p> <pre><code># Run all tests\nmake test\n\n# Run specific test types\nuv run pytest -m \"e2e\"          # End-to-end tests\nuv run pytest -m \"integration\"  # Integration tests  \nuv run pytest -m \"unit\"         # Unit tests\nuv run pytest -m \"smoke\"        # Smoke tests\n\n# Run with coverage\nuv run pytest --cov=ai_sleepwalker --cov-report=html\n</code></pre>"},{"location":"developer-guide/#test-categories","title":"Test Categories","text":"<ul> <li>E2E Tests: Complete user workflows from CLI to dream log creation</li> <li>Integration Tests: Component interactions with real dependencies</li> <li>Unit Tests: Individual component behavior</li> <li>Smoke Tests: Basic functionality verification</li> </ul>"},{"location":"developer-guide/#tdd-workflow","title":"TDD Workflow","text":"<p>This project follows test-driven development:</p> <ol> <li>Red: Write failing tests that define expected behavior</li> <li>Green: Implement minimal code to pass tests  </li> <li>Refactor: Improve code while keeping tests green</li> </ol> <p>See existing tests in <code>tests/</code> for patterns and examples.</p>"},{"location":"developer-guide/#architecture","title":"Architecture","text":"<p>The sleepwalker is designed with an extensible experience framework:</p> <pre><code>ai_sleepwalker/\n\u251c\u2500\u2500 core/                   # Core components\n\u2502   \u251c\u2500\u2500 idle_detector.py   # User activity monitoring\n\u2502   \u251c\u2500\u2500 sleep_preventer.py # Cross-platform sleep prevention  \n\u2502   \u2514\u2500\u2500 filesystem_explorer.py # Safe directory wandering\n\u251c\u2500\u2500 experiences/            # Experience modes\n\u2502   \u251c\u2500\u2500 base.py            # Abstract framework\n\u2502   \u251c\u2500\u2500 dream.py           # Dream mode (poetic reflections)\n\u2502   \u251c\u2500\u2500 adventure.py       # Adventure mode (coming soon)\n\u2502   \u2514\u2500\u2500 scrapbook.py       # Scrapbook mode (coming soon)\n\u251c\u2500\u2500 cli.py                 # Command-line interface\n\u2514\u2500\u2500 main.py                # Main orchestrator\n</code></pre>"},{"location":"developer-guide/#contributing","title":"Contributing","text":""},{"location":"developer-guide/#code-style","title":"Code Style","text":"<ul> <li>Python 3.10+ with strict type hints</li> <li>Follow project's ruff configuration</li> <li>All functions should have docstrings</li> <li>Use dataclasses for structured data</li> </ul>"},{"location":"developer-guide/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Write tests first (TDD approach)</li> <li>Implement your changes</li> <li>Run all quality checks: <code>make check</code></li> <li>Update documentation if needed</li> <li>Submit a pull request</li> </ol>"},{"location":"developer-guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>The project uses pre-commit hooks for quality assurance:</p> <ul> <li>Type checking with mypy</li> <li>Linting with ruff</li> <li>Formatting with ruff</li> <li>Testing - all tests must pass</li> </ul> <p>Never bypass pre-commit hooks with <code>--no-verify</code> unless absolutely necessary.</p>"},{"location":"developer-guide/#api-keys-for-development","title":"API Keys for Development","text":"<p>Set up at least one API key for testing:</p> <pre><code># Recommended for development (free tier)\nexport GEMINI_API_KEY=\"your-key\"\n\n# Or use other providers\nexport OPENAI_API_KEY=\"your-key\"\nexport ANTHROPIC_API_KEY=\"your-key\"\n</code></pre> <p>For CI/CD, the project skips tests requiring API keys automatically.</p>"},{"location":"developer-guide/#documentation","title":"Documentation","text":""},{"location":"developer-guide/#building-docs","title":"Building Docs","text":"<pre><code># Serve locally with live reload\nmake docs-serve\n\n# Build static site\nmake docs-build\n</code></pre> <p>Documentation is auto-deployed to GitHub Pages when changes are pushed to main.</p>"},{"location":"developer-guide/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Follow the writing conventions </li> <li>Avoid LLM buzzwords and academic language</li> <li>Focus on practical examples and user needs</li> <li>Test all code examples before committing</li> </ul>"},{"location":"developer-guide/#release-process","title":"Release Process","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update changelog</li> <li>Create release PR</li> <li>Merge to main</li> <li>Tag release</li> <li>GitHub Actions will handle publishing</li> </ol>"},{"location":"developer-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Use GitHub Issues for bugs and feature requests</li> <li>Discussions: Use GitHub Discussions for questions and ideas</li> <li>Contributing: See this guide and existing code patterns</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>Install AI Sleepwalker as a uv tool - this keeps it isolated and available everywhere:</p> <pre><code>uv tool install git+https://github.com/safurrier/ai-sleepwalker.git\n</code></pre> <p>Or clone and install locally:</p> <pre><code>git clone https://github.com/safurrier/ai-sleepwalker.git\ncd ai-sleepwalker\nuv tool install .\n</code></pre>"},{"location":"getting-started/#set-up-api-keys","title":"Set Up API Keys","text":"<p>Choose an AI provider to generate dreams:</p>"},{"location":"getting-started/#google-gemini-recommended-free-tier","title":"Google Gemini (Recommended - Free Tier)","text":"<ol> <li>Get a free API key from Google AI Studio</li> <li>Add to your shell profile (<code>~/.bashrc</code>, <code>~/.zshrc</code>, etc.):</li> </ol> <pre><code>export GEMINI_API_KEY=\"your-actual-key-here\"\n</code></pre> <ol> <li>Reload your shell: <code>source ~/.zshrc</code></li> </ol>"},{"location":"getting-started/#openai","title":"OpenAI","text":"<ol> <li>Get an API key from OpenAI</li> <li>Set the environment variable:</li> </ol> <pre><code>export OPENAI_API_KEY=\"sk-your-actual-key-here\"\n</code></pre>"},{"location":"getting-started/#anthropic-claude","title":"Anthropic (Claude)","text":"<ol> <li>Get an API key from Anthropic Console</li> <li>Set the environment variable:</li> </ol> <pre><code>export ANTHROPIC_API_KEY=\"sk-ant-your-key-here\"\n</code></pre>"},{"location":"getting-started/#ollama-localprivate","title":"Ollama (Local/Private)","text":"<p>For completely private, offline use:</p> <ol> <li>Install Ollama</li> <li>Pull a model: <code>ollama pull llama3.2</code></li> <li>Use the model directly: <code>sleepwalker ~/Documents --model ollama/llama3.2</code></li> </ol>"},{"location":"getting-started/#first-run","title":"First Run","text":"<p>Start sleepwalking in a safe directory:</p> <pre><code>sleepwalker ~/Documents\n</code></pre> <p>The sleepwalker will: 1. Wait for 5 minutes of inactivity (configurable) 2. Prevent your computer from sleeping 3. Explore the directory you specified 4. Generate dreams about what it finds 5. Save them to <code>~/.sleepwalker/dreams/</code></p>"},{"location":"getting-started/#common-options","title":"Common Options","text":"<pre><code># Custom idle timeout (seconds)\nsleepwalker ~/Documents --idle-timeout 600\n\n# Multiple directories\nsleepwalker ~/Documents ~/Projects ~/Photos\n\n# Specify AI model\nsleepwalker ~/Documents --model gpt-4o-mini\n\n# Dry run (no AI calls)\nsleepwalker ~/Documents --dry-run\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#no-api-key-found","title":"\"No API key found\"","text":"<p>Make sure you've set the environment variable and reloaded your shell.</p>"},{"location":"getting-started/#permission-denied-errors","title":"\"Permission denied\" errors","text":"<p>The sleepwalker can only read files you have access to. This is normal for system directories.</p>"},{"location":"getting-started/#dreams-arent-saving","title":"Dreams aren't saving","text":"<p>Check that <code>~/.sleepwalker/dreams/</code> exists and is writable. The sleepwalker should create it automatically.</p>"},{"location":"getting-started/#computer-still-goes-to-sleep","title":"Computer still goes to sleep","text":"<p>Some systems require additional permissions for sleep prevention. The sleepwalker will log warnings if it can't prevent sleep.</p>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<ul> <li>Read the API Reference for advanced usage</li> <li>Check GitHub Issues for known issues</li> <li>Join discussions about new experience modes</li> </ul>"},{"location":"getting-started/#development-setup","title":"Development Setup","text":"<p>Want to contribute? See the Developer Guide for setup instructions and contribution guidelines.</p>"},{"location":"reference/api/","title":"API Reference","text":"<p>This page contains the auto-generated API documentation for ai-sleepwalker.</p>"},{"location":"reference/api/#ai_sleepwalker","title":"ai_sleepwalker","text":""}]}